<h1><%= link_to 'DND Logger', root_path %> - <%= @log_book.title %></h1>


<div id="page-top-form">
<%= form_for @entry, :url => entries_path(:log_book_id => @log_book.id) do |f| %>

<%= f.text_area :description %>
<br>
<%= f.submit "Log This!" %>
<%= error_messages_for(f.object) %>

<% end %>
</div>

<div class="dropdown">
  <div class="dropdown-content">
  <%= link_to 'All entries', entries_path(:log_book_id => @log_book.id) %> | 
  @<%= link_to 'Characters', entries_path(:type_filter => 'characters', :log_book_id => @log_book.id) %> | 
  #<%= link_to 'Locations', entries_path(:type_filter => 'locations', :log_book_id => @log_book.id) %> |
  $<%= link_to 'Money', entries_path(:type_filter => 'money', :log_book_id => @log_book.id) %> |
  !<%= link_to 'Items', entries_path(:type_filter => 'items', :log_book_id => @log_book.id) %> |
  ~<%= link_to 'Rules', entries_path(:type_filter => 'rules', :log_book_id => @log_book.id) %> |
  ^<%= link_to 'Organizations', entries_path(:type_filter => 'orgs', :log_book_id => @log_book.id) %>
  </div>
  <%= link_to "Tags Index", tags_path(:log_book_id => @log_book.id) %>
</div>

<h2><%= @filter_type %></h2>

<script src="https://cdn.jsdelivr.net/mark.js/8.6.0/mark.min.js"></script>

<input name="entry_filter" type="text" id="entry_filter" placeholder="Filter..."> <a href="" onclick="clearSearch"><i class="fa fa-trash-o" aria-hidden="true"></i></a>

<div class="entry_list">

<%= render @entries %>

<div class="entry_list">



<script>
$( document ).ready(function() {
// Create an instance of mark.js and pass an argument containing
// the DOM object of the context (where to search for matches)
var $context = document.querySelectorAll('p.log_entry');
var markInstance = new Mark($context);
// Cache DOM elements
var keywordInput = document.getElementById('entry_filter');
// var optionInputs = document.querySelectorAll("input[name='opt[]']");

function clearSearch() {
	i = getElementById("entry_filter");
	i.value = '';
};

function performMark() {

  // Read the keyword
  var keyword = keywordInput.value;

  // Remove previous marked elements and mark
  // the new keyword inside the context
  markInstance.unmark({
  	done: function(){
    	markInstance.mark(keyword);
    }
  });
  filterEntries();
};

// Listen to input and option changes
keywordInput.addEventListener("input", performMark);
// for (var i = 0; i < optionInputs.length; i++) {
//   optionInputs[i].addEventListener("change", performMark);
// }





// autocomplete
$('#entry_description').textcomplete([{
    match: /([@]"?)(\w{2,})$/i,
    search: function (term, callback) {
        // var words = ['google', 'facebook', 'github', 'microsoft', 'yahoo', 'three different words'];
        var words = <%= @char_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '@' + '"' + word + '" '; 
        } else {
        return '@' + word + ' ';
      }
    }
},
{
    match: /([#]"?)(\w{2,})$/i,
    search: function (term, callback) {
        var words = <%= @loc_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '#' + '"' + word + '" '; 
        } else {
        return '#' + word + ' ';
      }
    }
},
{
    match: /([\$]"?)(\w{2,})$/i,
    search: function (term, callback) {
        var words = <%= @money_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '$' + '"' + word + '" '; 
        } else {
        return '$' + word + ' ';
      }
    }
},
{
    match: /([!]"?)(\w{2,})$/i,
    search: function (term, callback) {
        var words = <%= @item_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '!' + '"' + word + '" '; 
        } else {
        return '!' + word + ' ';
      }
    }
},
{
    match: /([~]"?)(\w{2,})$/i,
    search: function (term, callback) {
        var words = <%= @rule_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '~' + '"' + word + '" '; 
        } else {
        return '~' + word + ' ';
      }
    }
},
{
    match: /([\^]"?)(\w{2,})$/i,
    search: function (term, callback) {
        var words = <%= @org_tags.to_json.html_safe %>;
        callback($.map(words, function (word) {
            return word.toLowerCase().indexOf(term.toLowerCase()) === 0 ? word : null;
        }));
    },
    replace: function (word) {
        if (word.split(' ').length > 1) {
         return '^' + '"' + word + '" '; 
        } else {
        return '~' + word + ' ';
      }
    }
}]);



});
</script>